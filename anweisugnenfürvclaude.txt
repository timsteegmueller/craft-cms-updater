Projekt: Automatisierung der Updates unserer Craft CMS Systeme

ü•Ö Ziel
‚Ä¢	Verst√§ndnis f√ºr CI/CD-Prozesse im Webentwicklungsumfeld
‚Ä¢	Praktische Erfahrung mit N8N zur Automatisierung technischer Prozesse
‚Ä¢	Umgang mit Composer, Craft CMS, GitHub API, Envoyer Deployments und automatisierten Backups
‚Ä¢	Sicherheit im Umgang mit Fehlerf√§llen, Monitoring und einfachen Tests
‚Ä¢	Erkennen, wie Deployment-Workflows in einem professionellen Setup orchestriert werden
üõ†Ô∏è Aufgabe
Automatisiere das Update aller Craft CMS Instanzen, die wir hosten. Das erfolgt √ºber folgende Schritte:
1.	√úberwachung: In definierten Zyklen (z.‚ÄØB. w√∂chentlich oder monatlich) pr√ºft N8N, ob Updates verf√ºgbar sind.
2.	Update-Aktion:
o	Der Befehl php craft update all muss ausgef√ºhrt werden
o	Technisch steckt ein composer update dahinter
3.	Integration mit GitHub:
o	Die aktualisierte composer.lock und ggf. andere Dateien m√ºssen als Pull Request ins zugeh√∂rige GitHub-Repo eingecheckt werden
4.	Backup:
o	Vor jedem Update muss ein Backup der Datenbank erstellt werden
5.	Einfacher Test nach dem Update:
o	Ein HTTP-Request auf die Startseite des Projekts soll HTTP 200 OK zur√ºckgeben
o	Fehlerhafte Antworten (500er) m√ºssen erkannt und gemeldet werden
‚ÄÉ

‚úÖ Definition of Done
‚Ä¢	N8N l√§uft automatisch und regelm√§√üig
‚Ä¢	F√ºr jedes Projekt wird automatisch ein PR mit den aktualisierten Abh√§ngigkeiten erstellt
‚Ä¢	Vor jedem Update wird ein Datenbank-Backup erstellt
‚Ä¢	Nach jedem Update erfolgt ein automatischer Funktionstest (HTTP 200 auf /)
‚Ä¢	Fehlerhafte Deployments (500er Fehler) werden in einem Log oder Alert dokumentiert
‚Ä¢	Das System ist modular, sodass neue Craft-Projekte leicht eingebunden werden k√∂nnen
‚Ä¢	Es ist dokumentiert, wie man Projekte hinzuf√ºgt oder die Automatisierung manuell anst√∂√üt


‚ÄÉ
Spickzettel
Craft CMS Update lokal:
php craft update all (Quelle: https://craftcms.com/docs/commerce/5.x/update.html)
GitHub PR via API:
‚Ä¢	Branch erstellen
‚Ä¢	√Ñnderungen commiten (z.‚ÄØB. neue composer.lock)
‚Ä¢	Push auf Repo
‚Ä¢	PR √ºber GitHub API √∂ffnen
Deployment:
‚Ä¢	Wir deployen √ºber Laravel Envoyer
‚Ä¢	GitHub Push ‚Üí Envoyer √ºbernimmt Live-Rollout
Backup erstellen (je nach Setup):
‚Ä¢	z.‚ÄØB. via mysqldump:
mysqldump -u USER -p DATABASE > backup.sql
HTTP-Test nach Deployment:
‚Ä¢	Mit N8N Node "HTTP Request":
o	Methode: GET
o	URL: https://deinprojekt.de/
o	Erwarteter Status: 200
Challenge bei der PHP-Ausf√ºhrung:
‚Ä¢	Da es sich um ein GitHub-Repo handelt, muss der PHP-Befehl entweder:
o	per SSH remote auf dem Dev-Server ausgef√ºhrt werden (√ºber N8N und ein SSH Node)
o	oder in einer GitHub Action / CI-Umgebung abgebildet werden, falls dort eine Umgebung bereitsteht
o	oder ‚Ä¶

