name: Craft CMS Production Updates

on:
  workflow_dispatch:
    inputs:
      target_servers:
        description: 'Which servers to update'
        type: choice
        default: 'all'
        options:
          - 'all'
          - 'kunde1'
          - 'kunde2'
          - 'staging-only'
      skip_backup:
        description: 'Skip backup (dangerous!)'
        type: boolean
        default: false
      dry_run:
        description: 'Dry run - no real changes'
        type: boolean
        default: false
        
  repository_dispatch:
    types: [craft-production-update]

env:
  # Server Konfiguration - anpassen nach Bedarf
  SERVERS: |
    {
      "kunde1": {
        "host": "kunde1.example.com",
        "user": "deploy",
        "path": "/var/www/craft",
        "envoyer_hook": "https://envoyer.io/deploy/webhook-kunde1"
      },
      "kunde2": {
        "host": "kunde2.example.com", 
        "user": "deploy",
        "path": "/var/www/craft",
        "envoyer_hook": "https://envoyer.io/deploy/webhook-kunde2"
      }
    }

jobs:
  update-production-servers:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH Keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H kunde1.example.com >> ~/.ssh/known_hosts
          ssh-keyscan -H kunde2.example.com >> ~/.ssh/known_hosts

      - name: Update Kunde1 Server
        if: ${{ inputs.target_servers == 'all' || inputs.target_servers == 'kunde1' }}
        run: |
          echo "🎯 Updating Kunde1 Server..."
          
          # Remote Backup erstellen
          if [ "${{ inputs.skip_backup }}" != "true" ]; then
            echo "💾 Creating backup on kunde1..."
            ssh deploy@kunde1.example.com "cd /var/www/craft && php craft db/backup storage/backups/backup-$(date +%Y%m%d-%H%M%S).sql"
          fi
          
          # Health Check vor Update
          echo "🏥 Health check kunde1..."
          ssh deploy@kunde1.example.com "cd /var/www/craft && php web/health.php" || echo "Health check warning"
          
          # Update durchführen
          if [ "${{ inputs.dry_run }}" != "true" ]; then
            echo "⬆️ Running update on kunde1..."
            ssh deploy@kunde1.example.com "cd /var/www/craft && php craft update all --interactive=0"
            ssh deploy@kunde1.example.com "cd /var/www/craft && composer update --no-interaction"
            
            # Git Commit für Envoyer
            ssh deploy@kunde1.example.com "cd /var/www && git add . && git commit -m 'Auto update - $(date)' || echo 'No changes'"
            ssh deploy@kunde1.example.com "cd /var/www && git push origin main"
            
            # Laravel Envoyer Deployment triggern
            echo "🚀 Triggering Envoyer deployment..."
            curl -X POST "https://envoyer.io/deploy/webhook-kunde1"
          else
            echo "🧪 Dry run - showing available updates on kunde1"
            ssh deploy@kunde1.example.com "cd /var/www/craft && php craft update/info"
          fi

      - name: Update Kunde2 Server  
        if: ${{ inputs.target_servers == 'all' || inputs.target_servers == 'kunde2' }}
        run: |
          echo "🎯 Updating Kunde2 Server..."
          
          # Remote Backup erstellen
          if [ "${{ inputs.skip_backup }}" != "true" ]; then
            echo "💾 Creating backup on kunde2..."
            ssh deploy@kunde2.example.com "cd /var/www/craft && php craft db/backup storage/backups/backup-$(date +%Y%m%d-%H%M%S).sql"
          fi
          
          # Health Check vor Update
          echo "🏥 Health check kunde2..."
          ssh deploy@kunde2.example.com "cd /var/www/craft && php web/health.php" || echo "Health check warning"
          
          # Update durchführen
          if [ "${{ inputs.dry_run }}" != "true" ]; then
            echo "⬆️ Running update on kunde2..."
            ssh deploy@kunde2.example.com "cd /var/www/craft && php craft update all --interactive=0"
            ssh deploy@kunde2.example.com "cd /var/www/craft && composer update --no-interaction"
            
            # Git Commit für Envoyer
            ssh deploy@kunde2.example.com "cd /var/www && git add . && git commit -m 'Auto update - $(date)' || echo 'No changes'"
            ssh deploy@kunde2.example.com "cd /var/www && git push origin main"
            
            # Laravel Envoyer Deployment triggern
            echo "🚀 Triggering Envoyer deployment..."
            curl -X POST "https://envoyer.io/deploy/webhook-kunde2"
          else
            echo "🧪 Dry run - showing available updates on kunde2"
            ssh deploy@kunde2.example.com "cd /var/www/craft && php craft update/info"
          fi

      - name: Wait for Deployments
        if: ${{ inputs.dry_run != 'true' }}
        run: |
          echo "⏳ Waiting for Envoyer deployments to complete..."
          sleep 30
          
          # Health Check nach Deployment
          echo "🔍 Post-deployment health checks..."
          
          if [ "${{ inputs.target_servers }}" == "all" ] || [ "${{ inputs.target_servers }}" == "kunde1" ]; then
            curl -f https://kunde1.example.com/health.php || echo "❌ Kunde1 health check failed"
          fi
          
          if [ "${{ inputs.target_servers }}" == "all" ] || [ "${{ inputs.target_servers }}" == "kunde2" ]; then
            curl -f https://kunde2.example.com/health.php || echo "❌ Kunde2 health check failed"  
          fi

      - name: Summary Report
        run: |
          echo "📊 Update Summary:"
          echo "Target: ${{ inputs.target_servers }}"
          echo "Backup: ${{ !inputs.skip_backup && '✅' || '⏭️' }}"
          echo "Dry Run: ${{ inputs.dry_run && '🧪' || '✅' }}"
          echo "Trigger: ${{ github.event_name }}"
          echo "Time: $(date)"
          
          # GitHub Actions Summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🎯 Production Update Complete
          
          **Targets:** ${{ inputs.target_servers }}  
          **Backup Created:** ${{ !inputs.skip_backup && '✅' || '⏭️' }}  
          **Mode:** ${{ inputs.dry_run && '🧪 Dry Run' || '✅ Live Update' }}
          
          **Servers Updated:**
          - Kunde1: ${{ (inputs.target_servers == 'all' || inputs.target_servers == 'kunde1') && '✅' || '⏭️' }}
          - Kunde2: ${{ (inputs.target_servers == 'all' || inputs.target_servers == 'kunde2') && '✅' || '⏭️' }}
          
          **Post-deployment:**
          - Laravel Envoyer deployments triggered
          - Health checks performed
          - Real backups from live databases created
          EOF