# .github/workflows/craft-staging-deploy.yml
name: craft-staging-deploy
on:
  workflow_dispatch:
    inputs:
      envoyer: { description: 'Envoyer ausführen', type: boolean, default: true }
      skip_backup: { description: 'Backup überspringen', type: boolean, default: false }
      skip_health: { description: 'Health-Checks überspringen', type: boolean, default: false }
      allow_insecure: { description: 'SSL ignorieren', type: boolean, default: true }

permissions: { contents: read }

concurrency:
  group: deploy-staging
  cancel-in-progress: true

jobs:
  go:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - run: |
          sudo apt-get update
          sudo apt-get install -y jq openssh-client
      - run: |
          echo "SSH_HOST=${{ secrets.STAGE_SSH_HOST }}" >> $GITHUB_ENV
          echo "SSH_USER=${{ secrets.STAGE_SSH_USER }}" >> $GITHUB_ENV
          echo "PROJECT_PATH=${{ secrets.STAGE_PROJECT_PATH }}" >> $GITHUB_ENV
          echo "HEALTH_URL=${{ secrets.STAGE_HEALTH_URL }}" >> $GITHUB_ENV
          echo "ROOT_URL=${{ secrets.STAGE_ROOT_URL }}" >> $GITHUB_ENV
          echo "ENVOYER_HOOK=${{ secrets.STAGE_ENVOYER_HOOK_URL }}" >> $GITHUB_ENV
          echo "TS=$(date +%Y-%m-%d_%H-%M-%S)" >> $GITHUB_ENV
          if [ "${{ inputs.allow_insecure || 'false' }}" = "true" ]; then
            echo "CURL_OPTS=--fail --silent --show-error --max-time 20 --insecure -L" >> $GITHUB_ENV
          else
            echo "CURL_OPTS=--fail --silent --show-error --max-time 20 -L" >> $GITHUB_ENV
          fi
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.STAGE_SSH_KEY }}
      - run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts
      - if: ${{ inputs.skip_health != 'true' && env.HEALTH_URL != '' }}
        run: curl $CURL_OPTS "$HEALTH_URL" | jq -e '.status=="ok"'
      - if: ${{ inputs.skip_backup != 'true' }}
        run: |
          ssh "$SSH_USER@$SSH_HOST" "set -euo pipefail
            cd '$PROJECT_PATH'
            mkdir -p storage/backups
            php craft db/backup storage/backups/db_${TS}.sql
            gzip -f storage/backups/db_${TS}.sql
            echo storage/backups/db_${TS}.sql.gz" | tee remote_path.txt
          mkdir -p backups/staging
          scp "$SSH_USER@$SSH_HOST:$(cat remote_path.txt)" "backups/staging/"
      - if: ${{ inputs.envoyer || inputs.envoyer == 'true' }}
        run: |
          [ -n "$ENVOYER_HOOK" ] && curl $CURL_OPTS --retry 3 -X POST "$ENVOYER_HOOK" || echo "kein Envoyer Hook"
      - if: ${{ inputs.skip_health != 'true' && env.HEALTH_URL != '' && env.ROOT_URL != '' }}
        run: |
          end=$((SECONDS+600)); ok=0
          while [ $SECONDS -lt $end ]; do
            if curl $CURL_OPTS "$HEALTH_URL" | jq -e '.status=="ok"' >/dev/null && \
               [ "$(curl $CURL_OPTS -o /dev/null -w "%{http_code}\n" "$ROOT_URL")" = "200" ]; then
              ok=1; break
            fi
            sleep 10
          done
          test $ok -eq 1
      - run: echo "Staging ok (${ env.TS })"
