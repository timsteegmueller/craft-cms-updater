name: craft-mini

on:
  workflow_dispatch:
    inputs:
      dry_run:     { description: 'Nur anzeigen', type: boolean, default: false }
      skip_backup: { description: 'Backup ziehen',   type: boolean, default: false }
      envoyer:     { description: 'Envoyer deploy',  type: boolean, default: false }

permissions: { contents: write, pull-requests: write }

jobs:
  run:
    runs-on: ubuntu-latest
    services:
      mariadb:
        image: mariadb:10.11
        env:
          MARIADB_RANDOM_ROOT_PASSWORD: "1"
          MARIADB_DATABASE: craft_ci
          MARIADB_USER: craft
          MARIADB_PASSWORD: secret
        ports: ['3306:3306']
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -ucraft -psecret || exit 1"
          --health-interval=5s --health-timeout=3s --health-retries=60

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer
          coverage: none
          extensions: mbstring, intl, pdo_mysql, gd, exif, fileinfo, zip, xml, curl, sodium
          ini-values: memory_limit=-1

      - name: CI-.env schreiben (fix)
        working-directory: ./craft
        run: |
          set -euo pipefail
          SEC_KEY=$(php -r 'echo bin2hex(random_bytes(32));')
          {
            echo "CRAFT_ENVIRONMENT=ci"
            echo "CRAFT_DB_DRIVER=mysql"
            echo "CRAFT_DB_SERVER=127.0.0.1"
            echo "CRAFT_DB_PORT=3306"
            echo "CRAFT_DB_DATABASE=craft_ci"
            echo "CRAFT_DB_USER=craft"
            echo "CRAFT_DB_PASSWORD=secret"
            echo "CRAFT_SECURITY_KEY=$SEC_KEY"
            echo "PRIMARY_SITE_URL=http://127.0.0.1:8081"
            echo "CRAFT_WEB_URL=http://127.0.0.1:8081"
          } > .env
          # Backup optional holen
          if [ "${{ inputs.skip_backup }}" != "true" ] && [ -n "${BACKUP_URL:-}" ]; then
            mkdir -p ./backups
            curl -fsS -L -X POST "$BACKUP_URL?token=$BACKUP_TOKEN" -o ./backups/Backup.sql
            test -s ./backups/Backup.sql
          fi
          - name: Auf DB warten
            run: |
              for i in {1..60}; do
                MYSQL_PWD=secret mysql -h 127.0.0.1 -P 3306 -ucraft -e "SELECT 1" craft_ci && exit 0
                sleep 2
              done
              echo "DB nicht erreichbar"; exit 1
          
          - name: SQL importieren (falls vorhanden)
            working-directory: ./craft
            run: |
              if [ -s ./backups/Backup.sql ]; then
                MYSQL_PWD=secret mysql -h 127.0.0.1 -P 3306 -ucraft craft_ci < ./backups/Backup.sql
              else
                echo "Kein Backup.sql gefunden, fahre ohne Import fort."
              fi
          # Pre-Health
          php -d display_errors=0 -S 127.0.0.1:8081 -t web router.php >/tmp/php_server.log 2>&1 & echo $! > /tmp/php_pid
          for i in {1..60}; do c=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8081/ || true); [ "$c" = "200" -o "$c" = "302" -o "$c" = "401" -o "$c" = "403" ] && break; sleep 1; done
          [ "${c:-}" != "" ] || { tail -n 200 /tmp/php_server.log; exit 1; }
          # Update
          if [ "${{ inputs.dry_run }}" = "true" ]; then php craft update/info || true; else
            php craft migrate/all || true
            php craft project-config/apply --interactive=0 || true
            php craft update all --interactive=0 --backup=0 || true
            composer update --no-interaction --no-progress || true
          fi
          # Post-Health
          c=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8081/ || true)
          kill "$(cat /tmp/php_pid)" || true
          [ "$c" = "200" -o "$c" = "302" ] || { echo "HTTP $c"; tail -n 200 /tmp/php_server.log || true; exit 1; }
          # PR-Vorbereitung minimal
          echo "DATE=$DATE" >> $GITHUB_ENV
          if [ -z "$(git status --porcelain composer.lock)" ]; then mkdir -p ../docs; date -u +"%FT%TZ" > ../docs/last-update.txt; git add ../docs/last-update.txt; fi
          # Envoyer optional
          if [ "${{ inputs.envoyer }}" = "true" ] && [ -n "${ENVOYER_HOOK:-}" ]; then
            curl -fsS -X POST "$ENVOYER_HOOK" -o /dev/null
            if [ -n "${PROD_ROOT:-}" ]; then
              end=$((SECONDS+600)); ok=0; while [ $SECONDS -lt $end ]; do code=$(curl -fsS -o /dev/null -w "%{http_code}" "$PROD_ROOT" || true); [ "$code" = "200" ] && ok=1 && break; sleep 5; done; test $ok -eq 1
            fi
          fi

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update/${{ env.DATE }}-${{ github.run_number }}
          delete-branch: true
          commit-message: "chore(update): Craft deps aktualisiert (${{ env.DATE }})"
          title: "Craft deps update ${{ env.DATE }}"
          body: |
            CI-Update mit Pre und Post Health auf lokalem Server.
            Backup: ${{ inputs.skip_backup != true && 'gezogen' || 'Ã¼bersprungen' }}.
            Envoyer: ${{ inputs.envoyer && 'getriggert' || 'aus' }}.

      - name: Backup als Artifact
        if: ${{ inputs.skip_backup != true }}
        uses: actions/upload-artifact@v4
        with:
          name: db-backup-${{ github.run_id }}
          path: craft/backups/Backup.sql
          if-no-files-found: warn
