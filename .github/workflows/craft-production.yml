jobs:
  run:
    runs-on: ubuntu-latest
    services:
      mariadb:
        image: mariadb:10.11
        env:
          MARIADB_RANDOM_ROOT_PASSWORD: "1"
          MARIADB_DATABASE: craft_ci
          MARIADB_USER: craft
          MARIADB_PASSWORD: secret
        ports: ['3306:3306']
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -ucraft -psecret || exit 1"
          --health-interval=5s --health-timeout=3s --health-retries=60

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer
          coverage: none
          extensions: mbstring, intl, pdo_mysql, gd, exif, fileinfo, zip, xml, curl, sodium
          ini-values: memory_limit=-1

      - name: CI Pipeline kompakt
        env:
          BACKUP_URL:   ${{ secrets.BACKUP_URL }}     # z. B. https://<tunnel>/cms/backup.php
          BACKUP_TOKEN: ${{ secrets.BACKUP_TOKEN }}
          ENVOYER_HOOK: ${{ secrets.ENVOYER_HOOK_URL }}
          PROD_ROOT:    ${{ secrets.PROD_ROOT_URL }}
        run: |
          set -euo pipefail
          DATE=$(date +%Y-%m-%d)

          # Composer
          composer install --no-interaction --prefer-dist --no-progress
          cd craft
          composer install --no-interaction --prefer-dist --no-progress

          # .env schreiben (ohne Shell-Expansions in der Datei)
          SEC_KEY=$(php -r 'echo bin2hex(random_bytes(32));')
          {
            echo "CRAFT_ENVIRONMENT=ci"
            echo "CRAFT_DB_DRIVER=mysql"
            echo "CRAFT_DB_SERVER=127.0.0.1"
            echo "CRAFT_DB_PORT=3306"
            echo "CRAFT_DB_DATABASE=craft_ci"
            echo "CRAFT_DB_USER=craft"
            echo "CRAFT_DB_PASSWORD=secret"
            echo "CRAFT_SECURITY_KEY=$SEC_KEY"
            echo "PRIMARY_SITE_URL=http://127.0.0.1:8081"
            echo "CRAFT_WEB_URL=http://127.0.0.1:8081"
          } > .env

          # Optional: Backup ziehen
          if [ "${{ inputs.skip_backup }}" != "true" ] && [ -n "${BACKUP_URL:-}" ]; then
            mkdir -p ./backups
            curl -fsS -L -X POST "$BACKUP_URL?token=$BACKUP_TOKEN" -o ./backups/Backup.sql
            test -s ./backups/Backup.sql
          fi

          # DB warten und ggf. SQL importieren
          for i in {1..60}; do MYSQL_PWD=secret mysql -h 127.0.0.1 -P 3306 -ucraft -e "SELECT 1" craft_ci && break; sleep 2; done
          if [ -s ./backups/Backup.sql ]; then MYSQL_PWD=secret mysql -h 127.0.0.1 -P 3306 -ucraft craft_ci < ./backups/Backup.sql; fi

          # Router für PHP-Server
          cat > router.php <<'PHP'
          <?php
          $p = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
          $f = __DIR__ . '/web' . $p;
          if ($p !== '/' && file_exists($f) && !is_dir($f)) return false;
          require __DIR__ . '/web/index.php';
          PHP

          # Pre-Health
          php -d display_errors=0 -S 127.0.0.1:8081 -t web router.php >/tmp/php_server.log 2>&1 & echo $! > /tmp/php_pid
          for i in {1..60}; do c=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8081/ || true); [[ "$c" =~ ^(200|302|401|403)$ ]] && break; sleep 1; done
          [ "${c:-}" != "" ] || { tail -n 200 /tmp/php_server.log; exit 1; }

          # Update
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            php craft update/info || true
          else
            php craft migrate/all || true
            php craft project-config/apply --interactive=0 || true
            php craft update all --interactive=0 --backup=0 || true
            composer update --no-interaction --no-progress || true
          fi

          # Post-Health
          c=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8081/ || true)
          kill "$(cat /tmp/php_pid)" || true
          [ "$c" = "200" -o "$c" = "302" ] || { echo "HTTP $c"; tail -n 200 /tmp/php_server.log || true; exit 1; }

          # PR-Meta
          echo "DATE=$DATE" >> $GITHUB_ENV

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update/${{ env.DATE }}-${{ github.run_number }}
          delete-branch: true
          commit-message: "chore(update): Craft deps aktualisiert (${{ env.DATE }})"
          title: "Craft deps update ${{ env.DATE }}"
          body: |
            CI-Update mit Pre und Post Health (lokal).
            Backup: ${{ inputs.skip_backup != true && 'gezogen' || 'übersprungen' }}.
