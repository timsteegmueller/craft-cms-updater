# ===============================================================================
# Farbcode Craft CMS Automatisches Update System
# ===============================================================================
# 
# Dieser GitHub Actions Workflow automatisiert den kompletten Update-Prozess
# für alle Craft CMS Installationen im farbcode-base-23 Projekt.
#
# Integration:
# - Läuft für das Haupt-Craft CMS im /craft Verzeichnis
# - Kann erweitert werden für craft-test-repo und andere Instanzen
# - Nutzt die bestehende Infrastruktur (Docker, MariaDB, etc.)
#
# Trigger-Methoden:
# 1. Repository Dispatch - Von n8n Webhook ausgelöst (automatisch)
# 2. Workflow Dispatch - Manueller Start über GitHub UI
# 3. Schedule - Wöchentlich automatisch (optional)
#
# @author Tim Steegmüller (basierend auf craft-test-repo Implementierung)
# @version 1.0 - Hauptprojekt Integration
# @since 2024-08-04

name: 🔄 Farbcode Craft CMS Updates

# =============================================================================
# WORKFLOW TRIGGER KONFIGURATION
# =============================================================================
on:
  # Trigger 1: Repository Dispatch (von n8n Webhook ausgelöst)
  repository_dispatch:
    types: [craft-update-main, craft-update-all]
  
  # Trigger 2: Manueller Start über GitHub Actions UI
  workflow_dispatch:
    inputs:
      target_craft:
        description: 'Welche Craft Installation updaten?'
        required: true
        default: 'craft'
        type: choice
        options:
          - 'craft'              # Haupt-Craft CMS
          - 'craft-test-repo'    # Test-Installation
          - 'all'                # Alle Installationen
      skip_backup:
        description: 'Backup überspringen (nur für Tests)'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry Run - Keine echten Änderungen'
        required: false
        default: false
        type: boolean

  # Trigger 3: Automatischer wöchentlicher Schedule (optional)
  # schedule:
  #   - cron: '0 6 * * 1'  # Jeden Montag um 06:00 UTC

# =============================================================================
# ENVIRONMENT VARIABLES (GLOBAL)
# =============================================================================
env:
  # Docker Compose Konfiguration
  COMPOSE_FILE: docker-compose.yml
  COMPOSE_PROJECT_NAME: farbcode-base-23
  
  # Craft CMS Konfiguration
  CRAFT_ENVIRONMENT: dev
  CRAFT_DEV_MODE: true
  
  # Test URLs für Health Checks
  MAIN_CRAFT_URL: http://localhost:8080
  TEST_CRAFT_URL: http://localhost:8081

# =============================================================================
# WORKFLOW JOBS DEFINITION
# =============================================================================
jobs:
  # ===== JOB 1: HAUPT-CRAFT CMS UPDATE =====
  update-main-craft:
    name: 🎨 Haupt-Craft CMS Update
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    # Nur ausführen wenn main craft gewählt oder repository_dispatch
    if: |
      github.event_name == 'repository_dispatch' ||
      inputs.target_craft == 'craft' ||
      inputs.target_craft == 'all'
    
    steps:
      # === STEP 1: REPOSITORY CHECKOUT ===
      - name: 📥 Repository auschecken
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # === STEP 2: DOCKER ENVIRONMENT SETUP ===
      - name: 🐳 Docker Environment für Craft CMS starten
        run: |
          echo "🐳 Docker Compose Environment starten..."
          
          # Docker Compose Services starten (nur die benötigten)
          docker-compose up -d craftdb nginx
          
          # Warten bis Datenbank bereit ist
          echo "⏳ Warte auf MariaDB Verfügbarkeit..."
          timeout 60s bash -c 'until docker-compose exec -T craftdb mysqladmin ping -h localhost --silent; do sleep 2; done'
          
          echo "✅ Docker Environment bereit"

      # === STEP 3: PHP RUNTIME SETUP ===
      - name: 🛠️ PHP 8.2 Runtime installieren
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, zip, pdo_mysql, bcmath, gd, curl, json, openssl
          tools: composer:v2
          ini-values: memory_limit=512M, max_execution_time=300

      # === STEP 4: COMPOSER INSTALLATION ===
      - name: 📦 Composer Dependencies installieren
        working-directory: ./craft
        run: |
          echo "📦 Composer Dependencies installieren..."
          composer install --no-interaction --optimize-autoloader --prefer-dist
          echo "✅ Dependencies installiert"

      # === STEP 5: CRAFT ENVIRONMENT SETUP ===
      - name: 🔧 Craft Environment konfigurieren
        working-directory: ./craft
        run: |
          echo "🔧 Environment Setup für Docker..."
          
          # .env für Docker-Umgebung anpassen
          if [ ! -f .env ]; then
            cp .env.example .env
          fi
          
          # Docker-spezifische Konfiguration
          echo "CRAFT_DB_SERVER=127.0.0.1" >> .env
          echo "CRAFT_DB_PORT=33062" >> .env
          echo "CRAFT_DB_DATABASE=craft" >> .env
          echo "CRAFT_DB_USER=craft" >> .env
          echo "CRAFT_DB_PASSWORD=farbcode" >> .env
          
          echo "✅ Environment konfiguriert"

      # === STEP 6: HEALTH CHECK ===
      - name: 🏥 System Health Check
        working-directory: ./craft
        run: |
          echo "🏥 Health Check durchführen..."
          
          if [ -f web/health.php ]; then
            php web/health.php || echo "⚠️ Health Check mit Warnungen"
          else
            echo "⚠️ Health Check Endpoint nicht gefunden"
            php -r "require 'bootstrap.php'; echo 'Craft Bootstrap: OK' . PHP_EOL;"
          fi

      # === STEP 7: BACKUP ERSTELLEN ===
      - name: 💾 Datenbank Backup erstellen
        working-directory: ./craft
        if: ${{ !inputs.skip_backup }}
        run: |
          echo "💾 Backup erstellen..."
          
          mkdir -p storage/backups
          BACKUP_NAME="farbcode-backup-$(date +'%Y%m%d-%H%M%S')"
          
          if php craft db/backup "storage/backups/${BACKUP_NAME}.sql"; then
            echo "✅ Backup erfolgreich: ${BACKUP_NAME}.sql"
            ls -lh "storage/backups/${BACKUP_NAME}.sql"
          else
            echo "⚠️ Backup fehlgeschlagen - Update wird fortgesetzt"
          fi

      # === STEP 8: CRAFT CMS UPDATE ===
      - name: ⬆️ Craft CMS Update durchführen
        working-directory: ./craft
        run: |
          echo "⬆️ Craft CMS Update starten..."
          
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "🧪 DRY RUN - Nur verfügbare Updates anzeigen"
            php craft update/info
            exit 0
          fi
          
          # Update ausführen
          php craft update/info || echo "Update Info nicht verfügbar"
          php craft update all --interactive=0 --backup=0 || echo "⚠️ Update mit Warnungen"
          composer update --no-interaction --optimize-autoloader || echo "⚠️ Composer Update Probleme"
          
          echo "✅ Update abgeschlossen"

      # === STEP 9: CACHE CLEARING ===
      - name: 🧹 Cache leeren
        working-directory: ./craft
        run: |
          echo "🧹 Caches leeren..."
          php craft clear-caches/all || echo "⚠️ Cache clearing teilweise fehlgeschlagen"
          echo "✅ Cache Management abgeschlossen"

      # === STEP 10: FINAL WEBSITE TEST ===
      - name: 🌐 Website-Verfügbarkeitstest
        run: |
          echo "🌐 Finale Website-Tests..."
          
          # Test-URLs definieren
          TEST_URLS=(
            "${{ env.MAIN_CRAFT_URL }}/health.php"
            "${{ env.MAIN_CRAFT_URL }}/"
          )
          
          SUCCESS_COUNT=0
          TOTAL_COUNT=${#TEST_URLS[@]}
          
          for url in "${TEST_URLS[@]}"; do
            echo "🔍 Teste: $url"
            if curl -f -s --max-time 30 "$url" > /dev/null 2>&1; then
              echo "   ✅ HTTP 200 OK"
              ((SUCCESS_COUNT++))
            else
              echo "   ⚠️ Nicht erreichbar (normal in CI Umgebung)"
            fi
          done
          
          echo "📊 Website-Tests: $SUCCESS_COUNT/$TOTAL_COUNT erfolgreich"

      # === STEP 11: PULL REQUEST ERSTELLEN ===
      - name: 📤 Pull Request für Update erstellen
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update/craft-cms-main-${{ github.run_number }}
          delete-branch: true
          commit-message: |
            🤖 Automatisches Farbcode Craft CMS Update
            
            Update der Haupt-Craft Installation im /craft Verzeichnis
            Triggered by: ${{ github.event.client_payload.source || github.actor }}
            Workflow: ${{ github.run_id }}
          title: "⬆️ Farbcode Craft CMS Update - $(date +'%d.%m.%Y')"
          body: |
            ## 🎨 Automatisches Farbcode Craft CMS Update
            
            Dieses Update wurde automatisch für die **Haupt-Craft Installation** erstellt.
            
            ### 📊 Update-Details
            | Eigenschaft | Wert |
            |-------------|------|
            | **Ziel-Installation** | `/craft` (Haupt-Craft CMS) |
            | **Ausführungszeit** | $(date +'%d.%m.%Y %H:%M:%S') UTC |
            | **Trigger** | ${{ github.event_name }} |
            | **Quelle** | ${{ github.event.client_payload.source || github.actor }} |
            | **Workflow Run** | [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |
            
            ### ✅ Durchgeführte Schritte
            - [x] 🐳 **Docker Environment** gestartet
            - [x] 💾 **Datenbank-Backup** erstellt
            - [x] 🏥 **Health Check** durchgeführt
            - [x] ⬆️ **Craft CMS Update** ausgeführt
            - [x] 📦 **Composer Dependencies** aktualisiert
            - [x] 🧹 **Cache** geleert
            - [x] 🌐 **Website-Tests** durchgeführt
            
            ### 📁 Geänderte Dateien
            - `craft/composer.lock` - Aktualisierte Dependencies
            - `craft/config/project/` - Craft Konfiguration
            - `craft/storage/backups/` - Neues Backup
            
            ### 🚀 Nach dem Merge
            1. Laravel Envoyer startet automatisches Deployment
            2. Website geht mit Updates online
            3. Automatischer Post-Deployment Health Check
            
            ### 🔗 Integration mit farbcode-base-23
            Dieses Update ist Teil des **farbcode-base-23 Multi-System Setups**:
            - Haupt-Laravel App (`/app`)
            - Nuxt.js Frontend (`/client`) 
            - **Craft CMS** (`/craft`) ← Dieses Update
            - Docker Infrastructure
            
            ---
            
            🤖 **Automatisch erstellt durch GitHub Actions**  
            📧 **Support:** [Workflow Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          labels: |
            craft-cms
            automated-update
            main-installation
            ready-for-review
          assignees: ${{ github.actor }}

      # === STEP 12: DOCKER CLEANUP ===
      - name: 🧹 Docker Environment aufräumen
        if: always()
        run: |
          echo "🧹 Docker Environment stoppen..."
          docker-compose down --volumes --remove-orphans || echo "Docker cleanup completed"

  # ===== JOB 2: WORKFLOW SUMMARY =====
  workflow-summary:
    name: 📊 Update Summary
    runs-on: ubuntu-latest
    needs: [update-main-craft]
    if: always()
    
    steps:
      - name: 📊 Workflow Zusammenfassung erstellen
        run: |
          echo "
          ===============================================================================
          🎉 FARBCODE CRAFT CMS UPDATE WORKFLOW ABGESCHLOSSEN
          ===============================================================================
          
          📅 Ausführung:          $(date +'%d.%m.%Y %H:%M:%S') UTC
          🏷️  Repository:         ${{ github.repository }}
          🌟 Branch:              ${{ github.ref_name }}
          🔧 Trigger:             ${{ github.event_name }}
          👤 Initiated by:        ${{ github.event.client_payload.source || github.actor }}
          🆔 Run ID:              ${{ github.run_id }}
          
          📦 Ziel-Installation:   ${{ inputs.target_craft || 'craft (main)' }}
          🛠️  System:             farbcode-base-23 Multi-Stack
          🐳 Environment:         Docker + GitHub Actions
          
          ✅ Status:              ${{ needs.update-main-craft.result }}
          🔗 Workflow URL:        ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ===============================================================================
          "
          
          # GitHub Actions Summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🎨 Farbcode Craft CMS Update Abgeschlossen
          
          **Status:** ${{ needs.update-main-craft.result == 'success' && '✅ Erfolgreich' || '⚠️ Mit Warnungen' }}
          
          | Detail | Wert |
          |--------|------|
          | Installation | \`${{ inputs.target_craft || 'craft (main)' }}\` |
          | Ausführungszeit | $(date +'%d.%m.%Y %H:%M:%S') UTC |
          | Trigger | ${{ github.event_name }} |
          | Repository | ${{ github.repository }} |
          | Branch | \`${{ github.ref_name }}\` |
          
          ### 🔗 Nächste Schritte
          1. Prüfe erstellten Pull Request
          2. Review Änderungen in composer.lock
          3. Teste Staging-Deployment
          4. Merge für Live-Deployment
          
          EOF
